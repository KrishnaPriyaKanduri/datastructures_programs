#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node*next;
};
struct node*head,*tail=NULL;
void create(int data){
    struct node*newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=data;
    newnode->next=NULL;
    if(head==NULL){
        head=newnode;
        tail=newnode;
    }
    else{
       tail->next=newnode;
       tail=tail->next;
    }
}
void linkedlisttraversal(struct node*ptr){
    while(ptr!=NULL){
        printf("%d",ptr->data);
        ptr=ptr->next;
    }
}
struct node*insertatfirst(struct node*head,int data){
    struct node*ptr=(struct node*)malloc(sizeof(struct node));
    ptr->data=data;
    ptr->next=head;
    head=ptr;
    return(ptr);
}
struct node*insertatpos(struct node*head,int data,int pos){
    struct node*ptr=(struct node*)malloc(sizeof(struct node));
    struct node*temp=head;
    ptr->data=data;
    int i=0;
    while(i!=pos-1){
        temp=temp->next;
        i++;
    }
    ptr->next=temp->next;
    temp->next=ptr;
    return head;
}
struct node*insertatlast(struct node*head,int data){
    struct node*ptr=(struct node*)malloc(sizeof(struct node));
    struct node*temp=head;
    ptr->data=data;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=ptr->next;
    ptr->next=NULL;
    return head;
}
struct node*deleteatfirst(struct node*head){
    struct node*ptr=head;
    head=head->next;
    free(ptr);
    return head;
}
struct node*deleteatpos(struct node*head,int pos){
    struct node*p=head;
    struct node*q=head->next;
    for(int i=0;i<pos-1;i++){
        p=p->next;
        q=q->next;
    }
    p->next=q->next;
    free(q);
    return head;
}
struct node*deleteatlast(struct node*head){
    struct node*p=head;
    struct node*q=head->next;
    while(q->next!=NULL){
        p=p->next;
        q=q->next;
    }
    p->next=NULL;
    free(q);
    return head;
}
int main(){
    create(10);
    create(20);
    create(30);
    linkedlisttraversal(head);
    head=insertatfirst(head,50);
    linkedlisttraversal(head);
    
    return 0;
}
