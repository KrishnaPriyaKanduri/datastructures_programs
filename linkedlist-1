#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *head, *tail = NULL;

void create(int data) {
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = data;
    newnode->next = NULL;
    if (head == NULL) {
        head = newnode;
        tail = newnode;
    } else {
        tail->next = newnode;
        tail = tail->next;
    }
}

void linkedlisttraversal(struct node *ptr) {
    while (ptr != NULL) {
        printf("%d ", ptr->data);
        ptr = ptr->next;
    }
    printf("\n");
}

struct node *insertatfirst(struct node *head, int data) {
    struct node *ptr = (struct node *)malloc(sizeof(struct node));
    ptr->data = data;
    ptr->next = head;
    head = ptr;
    return head;
}

struct node *insertatpos(struct node *head, int pos, int data) {
    struct node *ptr = (struct node *)malloc(sizeof(struct node));
    struct node *temp = head;
    int i = 0;
    while (i != pos - 1) {
        temp = temp->next;
        i++;
    }
    ptr->data = data;
    ptr->next = temp->next;
    temp->next = ptr;
    return head;
}

struct node *insertatlast(struct node *head, int data) {
    struct node *ptr = (struct node *)malloc(sizeof(struct node));
    struct node *temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    ptr->data = data;
    temp->next = ptr;
    ptr->next = NULL;
    return head;
}

struct node *deleteatfirst(struct node *head) {
    struct node *ptr = head;
    head = head->next;
    free(ptr);
    return head;
}

struct node *deleteatpos(struct node *head, int pos) {
    struct node *ptr = head;
    struct node *q = head->next;
    for (int i = 0; i < pos - 1; i++) {
        ptr = ptr->next;
        q = q->next;
    }
    ptr->next = q->next;
    free(q);
    return head;
}

struct node *deleteatlast(struct node *head) {
    struct node *ptr = head;
    struct node *q = head->next;
    while (q->next != NULL) {
        ptr = ptr->next;
        q = q->next;
    }
    ptr->next = NULL;
    free(q);
    return head;
}

int main() {
    create(10);
    create(20);
    create(30);
    linkedlisttraversal(head);
    head = insertatfirst(head, 60);
    linkedlisttraversal(head);
    head = insertatpos(head, 2, 50);
    linkedlisttraversal(head);
    head = insertatlast(head, 70);
    linkedlisttraversal(head);
    head = deleteatfirst(head);
    linkedlisttraversal(head);
    head = deleteatpos(head, 2);
    linkedlisttraversal(head);
    head = deleteatlast(head);
    linkedlisttraversal(head);
    return 0;
}
